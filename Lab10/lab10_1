1. Would you rather use TensorFlow or Keras to build your models?

    I would rather use Keras to build my models since it is:
    i) user friendly - Keras follows best practices for reducing cognitive load via offering consistent and simple APIs and 
    minimizing the number of user actions. 
    ii) Modularity - Keras allows us to combine neural layers, cost functions, optimizers, initialization scheme, activation
    functions and regularization schemes to create new model.
    iii) Easy extensibility - it is easy to add new modules (as new classes and functions) which can make Keras suitable for 
    advanced research.
    Keras, in general, is a high-level neural networks API developed with a focus on enabling fast experimentation and less
    detailed work required from the user side so I would rather use Keras over TensorFlow to build my models. 
    
    
2. Tasks 1 & 2: Report your best hyper-parameter settings and their resulting performance on the testing dataset.
    
    <Task1>
    dnn_regressor = train_nn_regression_model(
    learning_rate=0.001,
    steps=2000,
    batch_size=100,
    hidden_units=[10, 10],
    training_examples=training_examples,
    training_targets=training_targets,
    validation_examples=validation_examples,
    validation_targets=validation_targets)
    
    Final RMSE (on training data):   108.25
    Final RMSE (on validation data): 110.35
    
    <Task2>
    
    california_housing_test_data = pd.read_csv("https://download.mlcc.google.com/mledu-datasets/california_housing_test.csv", sep=",")

    test_examples = preprocess_features(california_housing_test_data)
    test_targets = preprocess_targets(california_housing_test_data)

    predict_testing_input_fn = lambda: my_input_fn(test_examples, 
                                                   test_targets["median_house_value"], 
                                                   num_epochs=1, 
                                                   shuffle=False)

    test_predictions = dnn_regressor.predict(input_fn=predict_testing_input_fn)
    test_predictions = np.array([item['predictions'][0] for item in test_predictions])

    root_mean_squared_error = math.sqrt(
        metrics.mean_squared_error(test_predictions, test_targets))

    print("Final RMSE (on test data): %0.2f" % root_mean_squared_error)
    
    Final RMSE (on test data): 108.81
