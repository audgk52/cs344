a. They recommend FTRL for L1 optimization, but the code specifies the same rate (learning_rate) for all runs. 
How is FTRL managing the learning rate?



b. What good does the bucketing/binning do?

bucketing/binning does good in term of organizing the data with the similar characteristic. For instance, in this case poulation
feature was bucketized into three buckets: corresponding to less populated blocks, corresponding to mid populated blocks, and
corresponding to highly populated blocks. 
[[10001], [42004], [2500], [18000]] -> [[1], [2], [0], [1]]
Just by looking at the raw number, it is hard to tell where the datum is falling on the scale, but by bucketize the data, it is 
easier to tell where it falls into. 


c. Submit your solutions to tasks 1â€“2. Did you find their task 1 bucketing to make sense? Identify one unique feature cross 
for task 2 and explain how it could be useful.

#task 1

      def construct_feature_columns():
        """Construct the TensorFlow Feature Columns.

        Returns:
          A set of feature columns
        """ 
        households = tf.feature_column.numeric_column("households")
        longitude = tf.feature_column.numeric_column("longitude")
        latitude = tf.feature_column.numeric_column("latitude")
        housing_median_age = tf.feature_column.numeric_column("housing_median_age")
        median_income = tf.feature_column.numeric_column("median_income")
        rooms_per_person = tf.feature_column.numeric_column("rooms_per_person")

        # Divide households into 7 buckets.
        bucketized_households = tf.feature_column.bucketized_column(
          households, boundaries=get_quantile_based_boundaries(
            training_examples["households"], 7))

        # Divide longitude into 10 buckets.
        bucketized_longitude = tf.feature_column.bucketized_column(
          longitude, boundaries=get_quantile_based_boundaries(
            training_examples["longitude"], 10))

        #
        # YOUR CODE HERE: bucketize the following columns, following the example above:
        #
        bucketized_latitude = tf.feature_column.bucketized_column(
            latitude, boundaries=get_quantile_based_boundaries(
            training_examples["latitude"], 10))

        bucketized_housing_median_age = tf.feature_column.bucketized_column(
            housing_median_age, boundaries=get_quantile_based_boundaries(
            training_examples["housing_median_age"], 7))

        bucketized_median_income =tf.feature_column.bucketized_column(
            median_income, boundaries=get_quantile_based_boundaries(
            training_examples["median_income"], 7))

        bucketized_rooms_per_person =tf.feature_column.bucketized_column(
            rooms_per_person, boundaries=get_quantile_based_boundaries(
            training_examples["rooms_per_person"], 7))

        feature_columns = set([
          bucketized_longitude,
          bucketized_latitude,
          bucketized_housing_median_age,
          bucketized_households,
          bucketized_median_income,
          bucketized_rooms_per_person])

        return feature_columns
        
        Final RMSE: 88.88
        
#task 2
      def construct_feature_columns():
        """Construct the TensorFlow Feature Columns.

        Returns:
          A set of feature columns
        """ 
        households = tf.feature_column.numeric_column("households")
        longitude = tf.feature_column.numeric_column("longitude")
        latitude = tf.feature_column.numeric_column("latitude")
        housing_median_age = tf.feature_column.numeric_column("housing_median_age")
        median_income = tf.feature_column.numeric_column("median_income")
        rooms_per_person = tf.feature_column.numeric_column("rooms_per_person")

        # Divide households into 7 buckets.
        bucketized_households = tf.feature_column.bucketized_column(
          households, boundaries=get_quantile_based_boundaries(
            training_examples["households"], 7))

        # Divide longitude into 10 buckets.
        bucketized_longitude = tf.feature_column.bucketized_column(
          longitude, boundaries=get_quantile_based_boundaries(
            training_examples["longitude"], 10))

        # Divide latitude into 10 buckets.
        bucketized_latitude = tf.feature_column.bucketized_column(
          latitude, boundaries=get_quantile_based_boundaries(
            training_examples["latitude"], 10))

        # Divide housing_median_age into 7 buckets.
        bucketized_housing_median_age = tf.feature_column.bucketized_column(
          housing_median_age, boundaries=get_quantile_based_boundaries(
            training_examples["housing_median_age"], 7))

        # Divide median_income into 7 buckets.
        bucketized_median_income = tf.feature_column.bucketized_column(
          median_income, boundaries=get_quantile_based_boundaries(
            training_examples["median_income"], 7))

        # Divide rooms_per_person into 7 buckets.
        bucketized_rooms_per_person = tf.feature_column.bucketized_column(
          rooms_per_person, boundaries=get_quantile_based_boundaries(
            training_examples["rooms_per_person"], 7))

        # YOUR CODE HERE: Make a feature column for the long_x_lat feature cross
        long_x_lat = tf.feature_column.crossed_column(
        set([bucketized_longitude, bucketized_latitude]), hash_bucket_size=1000, 
        hash_key = None) 

        feature_columns = set([
          bucketized_longitude,
          bucketized_latitude,
          bucketized_housing_median_age,
          bucketized_households,
          bucketized_median_income,
          bucketized_rooms_per_person,
          long_x_lat])

        return feature_columns
       
       
       _ = train_model(
            learning_rate=1.0,
            steps=500,
            batch_size=100,
            feature_columns=construct_feature_columns(),
            training_examples=training_examples,
            training_targets=training_targets,
            validation_examples=validation_examples,
            validation_targets=validation_targets)
            
            Final RMSE: 79.78
            
            Potentially useful cross feature: median_house_value (target) and median_income can be a useful cross features. 
            If the model learns that certain areas of the city with higher median_house_value are more likely to show higher 
            median_income (correlation of 0.7), it is a stronger signal than two features considered individually.  
